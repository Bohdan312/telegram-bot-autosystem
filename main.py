import os
import base64
import json
import logging
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, CallbackContext, CallbackQueryHandler, ConversationHandler, ContextTypes
)

# üîê –†–æ–∑–∫–æ–¥–æ–≤—É—î–º–æ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ Google
creds_b64 = os.getenv("GOOGLE_CREDENTIALS_JSON_BASE64")
if not creds_b64:
    raise Exception("‚ùå GOOGLE_CREDENTIALS_JSON_BASE64 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

try:
    creds_dict = json.loads(base64.b64decode(creds_b64))
except Exception as e:
    raise Exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—ñ –∞–±–æ JSON: {e}")

scopes = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
gc = gspread.authorize(creds)

# üîó –í—ñ–¥–∫—Ä–∏—Ç—Ç—è Google –¢–∞–±–ª–∏—Ü—ñ
sheet_url = "https://docs.google.com/spreadsheets/d/12Y4cvC1mxzq42n2mNHv4RwUuTEfNjMTXLppnUBdITFg/edit#gid=0"
sheet = gc.open_by_url(sheet_url).sheet1

# üö¶ ConversationHandler
NAME, PHONE = range(2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üöÄ –°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data='apply')]]
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è:")
    return NAME

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text.strip()
    await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get('name')
    phone = update.message.text.strip()
    try:
        sheet.append_row([name, phone])
        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ —Ç–æ–±–æ—é.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É Google Sheet: {e}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

logging.basicConfig(level=logging.INFO)

async def main():
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise Exception("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=True
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Pella!")
    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
