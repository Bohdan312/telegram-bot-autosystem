import os
import base64
import logging
import gspread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, CallbackContext, CallbackQueryHandler, ConversationHandler, ContextTypes
)
from dotenv import load_dotenv

# üîê 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
creds_b64 = os.getenv("GOOGLE_CREDENTIALS_JSON_BASE64")

if not BOT_TOKEN:
    raise Exception("‚ùå BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É .env")
if not creds_b64:
    raise Exception("‚ùå GOOGLE_CREDENTIALS_JSON_BASE64 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π!")

# üì§ 2. –†–æ–∑–∫–æ–¥–æ–≤—É—î–º–æ Base64 —ñ —Å—Ç–≤–æ—Ä—é—î–º–æ JSON-—Ñ–∞–π–ª, —è–∫—â–æ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π
try:
    creds_json = base64.b64decode(creds_b64).decode("utf-8")
except Exception as e:
    raise Exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—ñ base64: {e}")

if not creds_json.strip().startswith("{"):
    raise Exception("‚ùå –†–æ–∑–∫–æ–¥–æ–≤–∞–Ω–æ, –∞–ª–µ —Ü–µ –Ω–µ JSON! –°—Ö–æ–∂–µ, –∑–º—ñ–Ω–Ω–∞ –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")

if not os.path.exists("telegram-sheet-writer.json"):
    with open("telegram-sheet-writer.json", "w") as f:
        f.write(creds_json)

# üîó 3. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ
try:
    gc = gspread.service_account(filename='telegram-sheet-writer.json')
except Exception as e:
    raise Exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}")

sheet_url = "https://docs.google.com/spreadsheets/d/12Y4cvC1mxzq42n2mNHv4RwUuTEfNjMTXLppnUBdITFg/edit#gid=0"
sheet = gc.open_by_url(sheet_url).sheet1

# üö¶ 4. –°—Ç–∞–Ω–∏
NAME, PHONE = range(2)

# üü¢ 5. –ö–æ–º–∞–Ω–¥–∏ —Ç–∞ –æ–±—Ä–æ–±–Ω–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üöÄ –°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data='apply')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'apply':
        await query.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è:")
        return NAME

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text.strip()
    await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get('name')
    phone = update.message.text.strip()

    # ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if not phone.startswith("+") or not phone[1:].isdigit():
        await update.message.reply_text("‚ùó –ù–æ–º–µ—Ä –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∑ + —ñ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏.")
        return PHONE

    try:
        sheet.append_row([name, phone])
        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ —Ç–æ–±–æ—é.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É Google Sheet: {e}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏.")

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# üõ†Ô∏è 6. –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# üöÄ 7. –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=True
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–æ—é!")
    await app.run_polling()

# ‚èØÔ∏è 8. –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
