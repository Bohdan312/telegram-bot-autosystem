import os
import base64
import logging
import gspread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, CallbackContext, CallbackQueryHandler, ConversationHandler
)

# üîê –†–æ–∑–∫–æ–¥–æ–≤—É—î–º–æ Google Sheets credentials –∑ base64
creds_b64 = os.getenv("GOOGLE_CREDENTIALS_JSON_BASE64")
if not creds_b64:
    raise Exception("GOOGLE_CREDENTIALS_JSON_BASE64 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

creds_json = base64.b64decode(creds_b64).decode("utf-8")
with open("telegram-sheet-writer.json", "w") as f:
    f.write(creds_json)

# üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ
gc = gspread.service_account(filename='telegram-sheet-writer.json')
sheet = gc.open_by_url("https://docs.google.com/spreadsheets/d/–¢–£–¢_–¢–í–Ü–ô_ID/edit#gid=0").sheet1  # ‚Üê –∑–º—ñ–Ω–∏—Ç–∏ URL

# üö¶ –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
NAME, PHONE = range(2)

# üîò –°—Ç–∞—Ä—Ç
async def start(update: Update, context: CallbackContext):
    keyboard = [[InlineKeyboardButton("üöÄ –°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data='apply')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=reply_markup)

# üß∑ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    if query.data == 'apply':
        await query.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è:")
        return NAME

# üë§ –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º‚Äô—è
async def name_handler(update: Update, context: CallbackContext):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

# ‚òéÔ∏è –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
async def phone_handler(update: Update, context: CallbackContext):
    name = context.user_data.get('name')
    phone = update.message.text

    # üìù –ó–∞–ø–∏—Å —É Google –¢–∞–±–ª–∏—Ü—é
    sheet.append_row([name, phone])

    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ —Ç–æ–±–æ—é.")
    return ConversationHandler.END

# ‚ùå –í–∏—Ö—ñ–¥
async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# üîß –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise Exception("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=True
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–æ—é!")
    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
