import os
import base64
import logging
import gspread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, CallbackContext, CallbackQueryHandler, ConversationHandler, ContextTypes
)
from dotenv import load_dotenv
load_dotenv()

# üîê 1. –†–æ–∑–∫–æ–¥–æ–≤—É—î–º–æ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ Google Sheets –∑ base64
creds_b64 = os.getenv("	
ZGYyMzQwNzY3MjUxZGQ5YmVkOWE4NzgzNzMxY2UwYWQ1ZDQ1MTkxYQo=")
if not creds_b64:
    raise Exception("ZGYyMzQwNzY3MjUxZGQ5YmVkOWE4NzgzNzMxY2UwYWQ1ZDQ1MTkxYQo===
")

creds_json = base64.b64decode(creds_b64).decode("utf-8")
with open("telegram-sheet-writer.json", "w") as f:
    f.write(creds_json)

# üîó 2. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ (‚úÖ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ URL)
gc = gspread.service_account(filename='telegram-sheet-writer.json')
sheet_url = "https://docs.google.com/spreadsheets/d/12Y4cvC1mxzq42n2mNHv4RwUuTEfNjMTXLppnUBdITFg/edit#gid=0"
sheet = gc.open_by_url(sheet_url).sheet1

# üö¶ 3. –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
NAME, PHONE = range(2)

# üîò 4. –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üöÄ –°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data='apply')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=reply_markup)

# üß∑ 5. –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'apply':
        await query.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è:")
        return NAME

# üë§ 6. –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º‚Äô—è
async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text.strip()
    await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

# ‚òéÔ∏è 7. –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω —ñ –∑–∞–ø–∏—Å—É—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é
async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get('name')
    phone = update.message.text.strip()

    try:
        sheet.append_row([name, phone])
        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ —Ç–æ–±–æ—é.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É Google Sheet: {e}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏.")

    return ConversationHandler.END

# ‚ùå 8. –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# üîß 9. –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# üöÄ 10. –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
async def main():
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise Exception("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=True
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–æ—é!")
    await app.run_polling()

# ‚èØÔ∏è –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
