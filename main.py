import os
import json
import base64
import logging
import gspread

from google.oauth2.service_account import Credentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, CallbackContext, CallbackQueryHandler,
    ConversationHandler, ContextTypes
)

# ‚è¨ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
from dotenv import load_dotenv
load_dotenv()

# üîê 1. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets —á–µ—Ä–µ–∑ base64
creds_b64 = os.getenv("GOOGLE_CREDENTIALS_JSON_BASE64")
if not creds_b64:
    raise Exception("‚ùå GOOGLE_CREDENTIALS_JSON_BASE64 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

try:
    creds_dict = json.loads(base64.b64decode(creds_b64))
except Exception as e:
    raise Exception(f"‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ GOOGLE_CREDENTIALS_JSON_BASE64: {e}")

scopes = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
creds_b64 = os.getenv("GOOGLE_CREDENTIALS_JSON_BASE64")
if not creds_b64:
    raise Exception("GOOGLE_CREDENTIALS_JSON_BASE64 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

creds_dict = json.loads(base64.b64decode(creds_b64))
scopes = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
gc = gspread.authorize(creds)

# üîó 2. URL Google –¢–∞–±–ª–∏—Ü—ñ
sheet_url = "https://docs.google.com/spreadsheets/d/12Y4cvC1mxzq42n2mNHv4RwUuTEfNjMTXLppnUBdITFg/edit#gid=0"
sheet = gc.open_by_url(sheet_url).sheet1

# üö¶ 3. –°—Ç–∞–Ω–∏
NAME, PHONE = range(2)

# üéØ 4. /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üöÄ –°–ø—ñ–≤–ø—Ä–∞—Ü—è", callback_data='apply')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=reply_markup)

# ‚è± 5. –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'apply':
        await query.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è:")
        return NAME

# üßç 6. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text.strip()
    await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

# üìû 7. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get('name')
    phone = update.message.text.strip()

    try:
        sheet.append_row([name, phone])
        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ —Ç–æ–±–æ—é.")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É Google Sheet: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏.")

    return ConversationHandler.END

# ‚ùå 8. –í—ñ–¥–º—ñ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# üßæ 9. –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise Exception("‚ùå BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=True
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–æ—é!")
    await app.run_polling()

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    import asyncio
    asyncio.run(main())
