from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

import os
import json
from google.oauth2 import service_account

# –û—Ç—Ä–∏–º—É—î–º–æ Google API –∫–ª—é—á —ñ–∑ ENV-–ø–µ—Ä–µ–º—ñ–Ω–Ω–æ—ó
creds_info = json.loads(os.environ["GOOGLE_CREDENTIALS_JSON"])
creds = service_account.Credentials.from_service_account_info(creds_info)



# Telegram —Ç–æ–∫–µ–Ω
TOKEN = "8026296885:AAHRIsqad7-M-1MjlmaweImA6AhFOJPrp5c"

# –°—Ç–∞–Ω —Ñ–æ—Ä–º–∏
NAME, CONTACT, NEED, FOLLOWUP = range(4)

# –î–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π –∑–∞—è–≤—Ü—ñ
submitted_users = set()

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π Telegram-–±–æ—Ç ‚Äî –≤–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –º—ñ—Å—Ü—ñ.\n\n"
        "–Ø —Å—Ç–≤–æ—Ä—é—é –∫–∞—Å—Ç–æ–º–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –±—ñ–∑–Ω–µ—Å—É, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó —Ç–∞ –ø—Ä–æ–¥–∞–∂—ñ–≤.\n\n"
        "‚úÖ –ö–æ–∂–µ–Ω –±–æ—Ç ‚Äî —Ü–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∫–æ—Ä–∏—Å—Ç—å:\n"
        "‚Ä¢ –ê–≤—Ç–æ–∑–±—ñ—Ä –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ –ü—Ä–æ–¥–∞–∂ —á–µ—Ä–µ–∑ –≤–æ—Ä–æ–Ω–∫—É\n"
        "‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ–¥ –Ω—ñ—à—É\n\n"
        "üîΩ –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ, —â–æ —Å–∞–º–µ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî —ñ —è –∑–∞–ø—Ä–æ–ø–æ–Ω—É—é —Ä—ñ—à–µ–Ω–Ω—è."
    )
    reply_markup = ReplyKeyboardMarkup([["–ü—Ä–∏–∫–ª–∞–¥–∏ –±–æ—Ç—ñ–≤"]], resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)
    return ConversationHandler.END

async def show_examples(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üõ† –ü—Ä–∏–∫–ª–∞–¥–∏ —Ä—ñ—à–µ–Ω—å, —è–∫—ñ —è —Å—Ç–≤–æ—Ä—é–≤–∞–≤:\n\n"
        "1. –ë–æ—Ç-–∑–∞—è–≤–∫–∞ –¥–ª—è —ñ–Ω—Å—Ç–∞–≥—Ä–∞–º-–µ–∫—Å–ø–µ—Ä—Ç–∞\n"
        "2. –ê–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á –¥–ª—è –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∏\n"
        "3. –°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram\n\n"
        "–•–æ—á—É –∑—Ä–æ–±–∏—Ç–∏ –±–æ—Ç –ø—ñ–¥ –≤–∞—à—É –∑–∞–¥–∞—á—É ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ."
    )
    await update.message.reply_text(text)

async def trigger_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in submitted_users:
        return ConversationHandler.END
    await update.message.reply_text("üíº –Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("üì± –ó–∞–ª–∏—à—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ–Ω—Ç–∞–∫—Ç (Telegram @, —Ç–µ–ª–µ—Ñ–æ–Ω):")
    return CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text
    await update.message.reply_text("üí¨ –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É–≤–∞—Ç–∏ / –¥–ª—è —á–æ–≥–æ –±–æ—Ç?")
    return NEED

async def get_need(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["need"] = update.message.text
    name = context.user_data["name"]
    contact = context.user_data["contact"]
    need = context.user_data["need"]
    date = datetime.now().strftime("%Y-%m-%d %H:%M")

    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("telegram-sheet-writer.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open("Telegram_Zayavky").worksheet("–õ–∏—Å—Ç1")
        sheet.append_row([name, contact, need, date])
    except Exception as e:
        print(f"Google Sheets –ø–æ–º–∏–ª–∫–∞: {e}")

    summary = f"üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\nüë§ –Ü–º‚Äô—è: {name}\n‚è∞ –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\nüí¨ –ü–æ—Ç—Ä–µ–±–∞: {need}"
    await context.bot.send_message(chat_id=661952434, text=summary)

    submitted_users.add(update.message.from_user.id)

    keyboard = [[
        InlineKeyboardButton("üîÅ –ó–∞–ª–∏—à–∏—Ç–∏ —â–µ –∑–∞—è–≤–∫—É", callback_data="new_form"),
        InlineKeyboardButton("üìÜ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", callback_data="book_call")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚úÖ –î—è–∫—É—é, —è –æ—Ç—Ä–∏–º–∞–≤ –∑–∞—è–≤–∫—É —ñ –≤–∂–µ –ø—Ä–∞—Ü—é—é –Ω–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é! –©–æ –¥–∞–ª—ñ?",
        reply_markup=reply_markup
    )
    return FOLLOWUP

async def handle_followup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "new_form":
        submitted_users.discard(query.from_user.id)
        await query.message.reply_text("üíº –Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
        return NAME

    elif query.data == "book_call":
        await query.message.reply_text(
            "üóì –©–æ–± –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ üëâ @formbot_xx_bot\n"
            "‚ö°Ô∏è –ê–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —á–∞—Å, —è –ø—ñ–¥–ª–∞—à—Ç—É—é—Å—å."
        )
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# üëâ async handler –¥–ª—è –∫—ñ–Ω—Ü—è —Ñ–æ—Ä–º–∏
async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, trigger_form)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)],
            NEED: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_need)],
            FOLLOWUP: [MessageHandler(filters.ALL, end_conversation)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("–ü—Ä–∏–∫–ª–∞–¥–∏ –±–æ—Ç—ñ–≤"), show_examples))

    app.add_handler(ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_followup)],
        states={FOLLOWUP: [CallbackQueryHandler(handle_followup)]},
        fallbacks=[]
    ))

    app.add_handler(conv_handler)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–æ—é!")
    app.run_polling()
